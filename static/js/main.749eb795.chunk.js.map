{"version":3,"sources":["AddCard/AddCard.js","AddCard/AddCardConnector.js","actions.js","Cards/Items/Todo.js","AddTodo/AddTodo.js","AddTodo/AddTodoConnector.js","Cards/CardItem.js","Cards/CardItemConnector.js","Cards/Cards.js","Cards/CardsConnector.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["MyButton","styled","Button","backgroundColor","color","width","MyFab","Fab","boxShadow","AddCard","_ref","onCardAdd","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","slide","setSlide","input","React","createRef","react_default","a","createElement","style","alignSelf","onKeyPress","e","key","trim","length","onClick","setTimeout","document","getElementById","focus","fullWidth","Slide","direction","in","Paper","Input","id","inputRef","onChange","target","autoFocus","size","AddCardConnector","connect","dispatch","text","type","addCard","Todo","index","editing","onDelete","onEdit","setTodoText","disabledUnderline","ListItemText","primary","ListItem","concat","Todo_MyFab","class","AddTodo","onTodoAdd","setText","variant","AddTodoConnector","state","ownProps","addTodo","MyCard","Card","padding","minWidth","CardItem","todos","AddTodo_AddTodoConnector","List","map","todo","indx","Items_Todo","Math","random","toString","substring","CardItemConnector","cards","useStyles","makeStyles","gridList","display","flexFlow","justifyContent","alignItems","Cards","classes","GridList","className","item","Cards_CardItemConnector","CardsConnector","App","Grid","container","name","Cards_CardsConnector","AddCard_AddCardConnector","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","assign","toConsumableArray","card","cardIndex","todoIndex","todoText","render","ReactDOM","es","src_App_0","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAUMA,EAAWC,YAAOC,IAAPD,CAAe,CAC9BE,gBAAiB,qBACjBC,MAAO,OACPC,MAAO,UAGHC,EAAQL,YAAOM,IAAPN,CAAY,CACxBO,UAAW,SAsEEC,EAnEC,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,UAAgBC,EAEPC,mBAAS,IAFFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE1BK,EAF0BH,EAAA,GAEnBI,EAFmBJ,EAAA,GAAAK,EAGPN,oBAAS,GAHFO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAG1BE,EAH0BD,EAAA,GAGnBE,EAHmBF,EAAA,GAK3BG,EAAQC,IAAMC,YAEpB,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAACC,UAAW,UACnBC,WAAa,SAAAC,GACE,UAAVA,EAAEC,KAA2C,IAAxBhB,EAAMiB,OAAOC,QACnCb,GAAS,KAIbI,EAAAC,EAAAC,cAAC5B,EAAD,CACEoC,QAAS,WACPd,GAAS,GACTe,WAAW,WACTC,SAASC,eAAe,SAASC,SAChC,MAELC,WAAS,GAPX,cAWAf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,UAAU,OACVC,GAAIvB,GAENK,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEd,WAAY,SAAAC,GACG,UAAVA,EAAEC,KAA2C,IAAxBhB,EAAMiB,OAAOC,SACnCb,GAAS,GACTX,EAAUM,GACVC,EAAS,OAIbQ,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEC,GAAG,QACHC,SAAUzB,EACVN,MAAOA,EACPgC,SAAU,SAAAjB,GAAC,OAAId,EAASc,EAAEkB,OAAOjC,QACjCkC,UAAW9B,IAEbK,EAAAC,EAAAC,cAACtB,EAAD,CACE8C,KAAK,QACLhB,QAAS,WACoB,IAAxBnB,EAAMiB,OAAOC,QAChBb,GAAS,GACTX,EAAUM,GACVC,EAAS,KAEPI,GAAS,KARf,SCvDO+B,EAFUC,YAAQ,KANN,SAAAC,GACzB,MAAO,CACL5C,UAAW,SAAA6C,GAAI,OAAID,ECNC,SAAAC,GACtB,MAAO,CACLC,KAAM,WACND,QDG4BE,CAAQF,OAIfF,CAAkC7C,iEEFrDH,EAAQL,YAAOM,IAAPN,CAAY,CACxBO,UAAW,SA8BEmD,EA3BF,SAAAjD,GAAgD,IAA7C8C,EAA6C9C,EAA7C8C,KAAMI,EAAuClD,EAAvCkD,MAAiBC,GAAsBnD,EAAhCoD,SAAgCpD,EAAtBmD,SAAsBjD,GAAAF,EAAbqD,OAEdlD,mBAAS2C,IAFkB1C,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE1CoD,GAF0ClD,EAAA,GAAAA,EAAA,IAI9C+C,EACXnC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOG,SAAU,SAAAjB,GAAC,OAAIgC,EAAYhC,EAAEkB,OAAOjC,QAAQkC,WAAS,EAACc,mBAAiB,IAE9EvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAcC,QAASX,IAEzB,OACE9B,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAUR,MAAOA,GACflC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAcC,QAAO,GAAAE,OAAKT,EAAQ,EAAb,OACrBlC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAcC,QAASX,IACvB9B,EAAAC,EAAAC,cAAC0C,EAAD,CAAOlB,KAAK,QAAQhD,MAAM,aACxBsB,EAAAC,EAAAC,cAAA,KAAG2C,MAAM,kBAAT,SAIF7C,EAAAC,EAAAC,cAAC0C,EAAD,CAAOlB,KAAK,SACV1B,EAAAC,EAAAC,cAAA,KAAG2C,MAAM,kBAAT,aCTOC,EAjBC,SAAA9D,GAA0B,IAAvBkD,EAAuBlD,EAAvBkD,MAAOa,EAAgB/D,EAAhB+D,UAAgB7D,EAEhBC,mBAAS,IAFOC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEjC4C,EAFiC1C,EAAA,GAE3B4D,EAF2B5D,EAAA,GAIxC,OACEY,EAAAC,EAAAC,cAAA,OAAKG,WAAY,SAAAC,GACF,UAAVA,EAAEC,KAA0C,IAAvBuB,EAAKtB,OAAOC,QAClCsC,EAAUb,EAAOJ,KAInB9B,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOG,SAAU,SAAAjB,GAAC,OAAI0C,EAAQ1C,EAAEkB,OAAOjC,QAAQkC,WAAS,IACxDzB,EAAAC,EAAAC,cAAC1B,EAAA,EAAD,CAAQyE,QAAQ,WAAWvE,MAAM,UAAUgC,QAAS,kBAAMqC,EAAUb,EAAOJ,KAA3E,WCESoB,EAFUtB,YAZD,SAACuB,EAAOC,GAC9B,MAAO,CACLlB,MAAOkB,EAASlB,QAIO,SAAAL,GACzB,MAAO,CACLkB,UAAW,SAACb,EAAOJ,GAAR,OAAiBD,EHNT,SAACK,EAAOJ,GAC7B,MAAO,CACLC,KAAM,WACNG,QACAJ,QGEqCuB,CAAQnB,EAAOJ,OAI/BF,CAA6CkB,GCVhEQ,EAAS/E,YAAOgF,IAAPhF,CAAa,CAC1BiF,QAAS,YACTC,SAAU,UAqBGC,EAdE,SAAA1E,GAA4B,IAAzBkD,EAAyBlD,EAAzBkD,MAAOJ,EAAkB9C,EAAlB8C,KAAM6B,EAAY3E,EAAZ2E,MAC/B,OACE3D,EAAAC,EAAAC,cAACoD,EAAD,CAAQpB,MAAOA,GACblC,EAAAC,EAAAC,cAAA,cAAO4B,EAAP,KACA9B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0D,EAAD,CAAkB1B,MAAOA,IACzBlC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,KACGF,EAAMG,IAAI,SAACC,EAAMC,GAAP,OAAgBhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAM1D,IAXhC2D,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IAWWvC,KAAMiC,EAAKjC,KAAMI,MAAO8B,SCVrEM,EAFW1C,YARF,SAACuB,EAAOC,GAC9B,MAAO,CACLlB,MAAOkB,EAASlB,MAChBJ,KAAOsB,EAAStB,KAChB6B,MAAOR,EAAMoB,MAAMnB,EAASlB,OAAOyB,QAIY,KAAzB/B,CAA+B8B,YCFnDc,EAAYC,YAAW,iBAAO,CAClCC,SAAU,CACRC,QAAS,OACTC,SAAU,aACVC,eAAgB,eAChBC,WAAY,iBAaDC,EATD,SAAA/F,GAAe,IAAZuF,EAAYvF,EAAZuF,MACTS,EAAUR,IAChB,OACExE,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAUC,UAAWF,EAAQN,UAC1BH,EAAMT,IAAI,SAACqB,EAAMjD,GAAP,OAAiBlC,EAAAC,EAAAC,cAACkF,EAAD,CAAmB7E,IAhB5C2D,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IAAMH,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,IAgBvBnC,MAAOA,EAAOJ,KAAMqD,EAAKrD,WCZlFuD,EAFQzD,YANC,SAAAuB,GACtB,MAAO,CACLoB,MAAOpB,EAAMoB,QAI+B,KAAzB3C,CAA+BmD,GCevCO,EAbH,WACV,OACEtF,EAAAC,EAAAC,cAAA,OAAKgF,UAAU,OACblF,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAMC,WAAS,EAACvE,UAAU,MAAM6D,WAAW,cACzC9E,EAAAC,EAAAC,cAAA,OAAKuF,KAAK,SACRzF,EAAAC,EAAAC,cAACwF,EAAD,OAEF1F,EAAAC,EAAAC,cAACyF,EAAD,SCNYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+EC6CAC,EAAe,CACnB1B,MAAO,ICtDH2B,EAAQC,YDTK,WAAkC,IAAjChD,EAAiCiD,UAAA3F,OAAA,QAAA4F,IAAAD,UAAA,GAAAA,UAAA,GAAzBH,EAAcK,EAAWF,UAAA3F,OAAA,EAAA2F,UAAA,QAAAC,EACnD,OAAOC,EAAOvE,MACZ,IAAK,WACH,OAAO1C,OAAOkH,OAAO,GAAIpD,EAAO,CAC9BoB,MAAK,GAAA5B,OAAAtD,OAAAmH,EAAA,EAAAnH,CACA8D,EAAMoB,OADN,CAEH,CACEzC,KAAMwE,EAAOxE,KACb6B,MAAO,QAIf,IAAK,WAMH,OAAOtE,OAAOkH,OAAO,GAAIpD,EAAO,CAC9BoB,MAAOpB,EAAMoB,MAAMT,IAAI,SAAC2C,EAAMC,GAC5B,OAAGA,IAAcJ,EAAOpE,MACf7C,OAAOkH,OAAO,GAAIE,EAAM,CAC7B9C,MAAK,GAAAhB,OAAAtD,OAAAmH,EAAA,EAAAnH,CACA8D,EAAMoB,MAAMmC,GAAW/C,OADvB,CAEH,CACExB,SAAS,EACTL,KAAMwE,EAAOxE,UAKZ2E,MAIf,IAAK,mBACH,OAAOpH,OAAOkH,OAAO,GAAIpD,EAAO,CAC9BoB,MAAOpB,EAAMoB,MAAMT,IAAI,SAAC2C,EAAMC,GAC5B,OAAGA,IAAcJ,EAAOI,UACfrH,OAAOkH,OAAO,GAAIE,EAAM,CAC7B9C,MAAOR,EAAMoB,MAAMmC,GAAW/C,MAAMG,IAAI,SAACC,EAAM4C,GAC7C,OAAGA,IAAcL,EAAOK,UACftH,OAAOkH,OAAO,GAAIxC,EAAM,CAC7B5B,SAAU4B,EAAK5B,QACfL,KAAMwE,EAAOM,WAGR7C,MAKN0C,MAIf,QACE,OAAOtD,KC9CP0D,EAAS,WACbC,IAASD,OACP7G,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,CAAUb,MAAOA,GACflG,EAAAC,EAAAC,cAAC8G,EAAD,OAGFpG,SAASC,eAAe,UAI5BqF,EAAMe,UAAUJ,GAChBA,IF0GM,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.749eb795.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { styled } from '@material-ui/styles'\r\nimport './add.css'\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport Slide from '@material-ui/core/Slide'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Input from '@material-ui/core/Input'\r\nimport Fab   from '@material-ui/core/Fab'\r\n\r\nconst MyButton = styled(Button)({\r\n  backgroundColor: \"rgba(0, 0, 0, 0.2)\",\r\n  color: \"#fff\",\r\n  width: \"150px\"\r\n})\r\n\r\nconst MyFab = styled(Fab)({\r\n  boxShadow: 'none'\r\n})\r\n\r\nconst AddCard = ({ onCardAdd }) => {\r\n\r\n  const [value, setValue] = useState('')\r\n  const [slide, setSlide] = useState(false)\r\n\r\n  const input = React.createRef()\r\n\r\n  return (\r\n    <div \r\n      style={{alignSelf: \"center\"}} \r\n      onKeyPress={(e => {\r\n        if(e.key === 'Enter' && value.trim().length === 0) {\r\n          setSlide(false)\r\n        }\r\n      })}\r\n    >\r\n      <MyButton\r\n        onClick={() => {\r\n          setSlide(true)\r\n          setTimeout(() => {\r\n            document.getElementById('input').focus()\r\n          }, 100)\r\n      }}\r\n        fullWidth\r\n      > \r\n        + ADD CARD\r\n      </MyButton>\r\n      <Slide \r\n        direction=\"down\" \r\n        in={slide} \r\n      >\r\n      <Paper \r\n        onKeyPress={e => {\r\n          if(e.key === 'Enter' && value.trim().length !== 0) {\r\n            setSlide(false)\r\n            onCardAdd(value)\r\n            setValue('')\r\n          }\r\n        }}\r\n      >\r\n        <Input\r\n          id=\"input\"\r\n          inputRef={input}\r\n          value={value} \r\n          onChange={e => setValue(e.target.value)} \r\n          autoFocus={slide}\r\n        />\r\n        <MyFab \r\n          size=\"small\" \r\n          onClick={() => {\r\n            if(value.trim().length !== 0) {\r\n            setSlide(false)\r\n            onCardAdd(value)\r\n            setValue('')\r\n            } else {\r\n              setSlide(false)\r\n            }\r\n          }}\r\n        > \r\n          + \r\n        </MyFab>\r\n      </Paper>\r\n    </Slide>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddCard","import { connect } from 'react-redux'\r\nimport { addCard } from '../actions'\r\nimport AddCard from './AddCard'\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onCardAdd: text => dispatch(addCard(text))\r\n  }\r\n}\r\n\r\nconst AddCardConnector = connect(null, mapDispatchToProps)(AddCard)\r\n\r\nexport default AddCardConnector","export const addCard =  text => {\r\n  return {\r\n    type: 'ADD_CARD',\r\n    text,\r\n  }\r\n}\r\n\r\nexport const addTodo = (index, text) => {\r\n  return {\r\n    type: 'ADD_TODO',\r\n    index,\r\n    text\r\n  }\r\n}\r\n\r\nexport const toggleEditTodo = (cardIndex, todoIndex, todoText) => {\r\n  return {\r\n    type: 'TOGGLE_EDIT_TODO',\r\n    cardIndex,\r\n    todoIndex,\r\n    todoText\r\n  }\r\n}","import React, { useState } from 'react'\r\nimport { styled } from '@material-ui/core/styles'\r\n\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Input from '@material-ui/core/Input'\r\nimport Fab from '@material-ui/core/Fab'\r\n\r\nconst MyFab = styled(Fab)({\r\n  boxShadow: 'none'\r\n})\r\n\r\nconst Todo = ({ text, index, onDelete, editing, onEdit }) => {\r\n\r\n  const [todoText, setTodoText] = useState(text)\r\n\r\n  const html = editing ?\r\n    <Input onChange={e => setTodoText(e.target.value)} autoFocus disabledUnderline />\r\n    :\r\n    <ListItemText primary={text} />\r\n\r\n  return (\r\n    <ListItem index={index}>\r\n      <ListItemText primary={`${index + 1}.`} />\r\n      <ListItemText primary={text} />\r\n      <MyFab size=\"small\" color=\"secondary\">\r\n        <i class=\"material-icons\">\r\n          edit\r\n        </i>\r\n      </MyFab>\r\n      <MyFab size=\"small\"> \r\n        <i class=\"material-icons\">\r\n          delete\r\n        </i>  \r\n      </MyFab>\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import React, { useState } from 'react'\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport Input from '@material-ui/core/Input'\r\n\r\nconst AddTodo = ({ index, onTodoAdd }) => {\r\n\r\n  const [text, setText] = useState('')\r\n\r\n  return (\r\n    <div onKeyPress={e => {\r\n      if(e.key === 'Enter' && text.trim().length !== 0) {\r\n        onTodoAdd(index, text)\r\n      }\r\n    }}\r\n    >\r\n      <Input onChange={e => setText(e.target.value)} autoFocus />\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={() => onTodoAdd(index, text)}> add </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddTodo","import { connect } from 'react-redux'\r\nimport { addTodo } from '../actions'\r\n\r\nimport AddTodo from './AddTodo'\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    index: ownProps.index\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onTodoAdd: (index, text) => dispatch(addTodo(index, text))\r\n  }\r\n}\r\n\r\nconst AddTodoConnector = connect(mapStateToProps, mapDispatchToProps)(AddTodo)\r\n\r\nexport default AddTodoConnector","import React from 'react'\r\nimport { styled } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport List from '@material-ui/core/List'\r\nimport Todo from './Items/Todo'\r\nimport AddTodoConnector from '../AddTodo/AddTodoConnector'\r\n\r\nconst MyCard = styled(Card)({\r\n  padding: '20px 10px',\r\n  minWidth: '200px',\r\n})\r\n\r\nconst generateID = () => {\r\n  return Math.random().toString(36).substring(2, 15);\r\n}\r\n\r\nconst CardItem = ({ index, text, todos }) => {\r\n  return (\r\n    <MyCard index={index}>\r\n      <h3> { text } </h3>\r\n      <hr />\r\n      <AddTodoConnector index={index} />\r\n      <hr />\r\n      <List>\r\n        {todos.map((todo, indx) => <Todo key={generateID()} text={todo.text} index={indx} />)}\r\n      </List>\r\n    </MyCard>\r\n  )\r\n}\r\n\r\nexport default CardItem","import { connect } from 'react-redux'\r\n\r\nimport CardItem from './CardItem'\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    index: ownProps.index,\r\n    text:  ownProps.text,\r\n    todos: state.cards[ownProps.index].todos,\r\n  }\r\n}\r\n\r\nconst CardItemConnector = connect(mapStateToProps, null)(CardItem)\r\n\r\nexport default CardItemConnector","import React from 'react'\r\nimport { makeStyles } from '@material-ui/styles'\r\n\r\nimport CardItemConnector from './CardItemConnector'\r\nimport GridList from '@material-ui/core/GridList'\r\n\r\nconst genereteID = () => {\r\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  gridList: {\r\n    display: 'flex',\r\n    flexFlow: 'row nowrap',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'flex-start'\r\n  }\r\n})) \r\n\r\nconst Cards = ({ cards }) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <GridList className={classes.gridList}>\r\n      {cards.map((item, index) => <CardItemConnector key={genereteID()} index={index} text={item.text} />)}\r\n    </GridList>\r\n  )\r\n}\r\n\r\nexport default Cards\r\n","import { connect } from 'react-redux'\r\nimport Cards from './Cards'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cards: state.cards\r\n  }\r\n}\r\n\r\nconst CardsConnector = connect(mapStateToProps, null)(Cards)\r\n\r\nexport default CardsConnector","import React from 'react';\nimport './App.css';\nimport AddCardConnector from './AddCard/AddCardConnector'\nimport Grid from '@material-ui/core/Grid'\nimport CardsConnector from './Cards/CardsConnector'\n\n\n\n\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Grid container direction=\"row\" alignItems=\"flex-start\">\n        <div name=\"cards\">\n          <CardsConnector />\n        </div>\n        <AddCardConnector />\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nexport const app = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case 'ADD_CARD':\r\n      return Object.assign({}, state, {\r\n        cards: [\r\n          ...state.cards,\r\n          {\r\n            text: action.text ,\r\n            todos: []\r\n          }\r\n        ]\r\n      })\r\n    case 'ADD_TODO': \r\n      /* \r\n        In this case i check whether or not particular card's index is equal to map-index \r\n        and if it is, i return this card and add to his \"todos\" property new \"todo\" item,\r\n        which text is taken from action.text\r\n      */\r\n      return Object.assign({}, state, {\r\n        cards: state.cards.map((card, cardIndex) => {\r\n          if(cardIndex === action.index) {\r\n            return Object.assign({}, card, {\r\n              todos: [\r\n                ...state.cards[cardIndex].todos,\r\n                {\r\n                  editing: false,\r\n                  text: action.text\r\n                }\r\n              ]\r\n            })\r\n          } else {\r\n            return card\r\n          }\r\n        })\r\n      })\r\n    case 'TOGGLE_EDIT_TODO':\r\n      return Object.assign({}, state, {\r\n        cards: state.cards.map((card, cardIndex) => {\r\n          if(cardIndex === action.cardIndex) {\r\n            return Object.assign({}, card, {\r\n              todos: state.cards[cardIndex].todos.map((todo, todoIndex) => {\r\n                if(todoIndex === action.todoIndex) {\r\n                  return Object.assign({}, todo, {\r\n                    editing: !todo.editing,\r\n                    text: action.todoText\r\n                  })\r\n                } else {\r\n                  return todo\r\n                }\r\n              })\r\n            })\r\n          } else {\r\n            return card\r\n          }\r\n        })\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst initialState = {\r\n  cards: []\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport {app} from './reducers'\n\nconst store = createStore(app)\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n    , \n    document.getElementById('root')\n  )  \n}\n\nstore.subscribe(render)\nrender()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}